//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OnlineBackupUtility.Root.FileShare {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RootDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RootDataSet : global::System.Data.DataSet {
        
        private RootDataTable tableRoot;
        
        private NameFilterDataTable tableNameFilter;
        
        private AttributeFilterDataTable tableAttributeFilter;
        
        private ScheduleDataTable tableSchedule;
        
        private global::System.Data.DataRelation relationRoot_NameFilter;
        
        private global::System.Data.DataRelation relationRoot_AttributeFilter;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RootDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RootDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Root"] != null)) {
                    base.Tables.Add(new RootDataTable(ds.Tables["Root"]));
                }
                if ((ds.Tables["NameFilter"] != null)) {
                    base.Tables.Add(new NameFilterDataTable(ds.Tables["NameFilter"]));
                }
                if ((ds.Tables["AttributeFilter"] != null)) {
                    base.Tables.Add(new AttributeFilterDataTable(ds.Tables["AttributeFilter"]));
                }
                if ((ds.Tables["Schedule"] != null)) {
                    base.Tables.Add(new ScheduleDataTable(ds.Tables["Schedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RootDataTable Root {
            get {
                return this.tableRoot;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NameFilterDataTable NameFilter {
            get {
                return this.tableNameFilter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AttributeFilterDataTable AttributeFilter {
            get {
                return this.tableAttributeFilter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScheduleDataTable Schedule {
            get {
                return this.tableSchedule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RootDataSet cln = ((RootDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Root"] != null)) {
                    base.Tables.Add(new RootDataTable(ds.Tables["Root"]));
                }
                if ((ds.Tables["NameFilter"] != null)) {
                    base.Tables.Add(new NameFilterDataTable(ds.Tables["NameFilter"]));
                }
                if ((ds.Tables["AttributeFilter"] != null)) {
                    base.Tables.Add(new AttributeFilterDataTable(ds.Tables["AttributeFilter"]));
                }
                if ((ds.Tables["Schedule"] != null)) {
                    base.Tables.Add(new ScheduleDataTable(ds.Tables["Schedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRoot = ((RootDataTable)(base.Tables["Root"]));
            if ((initTable == true)) {
                if ((this.tableRoot != null)) {
                    this.tableRoot.InitVars();
                }
            }
            this.tableNameFilter = ((NameFilterDataTable)(base.Tables["NameFilter"]));
            if ((initTable == true)) {
                if ((this.tableNameFilter != null)) {
                    this.tableNameFilter.InitVars();
                }
            }
            this.tableAttributeFilter = ((AttributeFilterDataTable)(base.Tables["AttributeFilter"]));
            if ((initTable == true)) {
                if ((this.tableAttributeFilter != null)) {
                    this.tableAttributeFilter.InitVars();
                }
            }
            this.tableSchedule = ((ScheduleDataTable)(base.Tables["Schedule"]));
            if ((initTable == true)) {
                if ((this.tableSchedule != null)) {
                    this.tableSchedule.InitVars();
                }
            }
            this.relationRoot_NameFilter = this.Relations["Root_NameFilter"];
            this.relationRoot_AttributeFilter = this.Relations["Root_AttributeFilter"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RootDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RootDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRoot = new RootDataTable();
            base.Tables.Add(this.tableRoot);
            this.tableNameFilter = new NameFilterDataTable();
            base.Tables.Add(this.tableNameFilter);
            this.tableAttributeFilter = new AttributeFilterDataTable();
            base.Tables.Add(this.tableAttributeFilter);
            this.tableSchedule = new ScheduleDataTable();
            base.Tables.Add(this.tableSchedule);
            this.relationRoot_NameFilter = new global::System.Data.DataRelation("Root_NameFilter", new global::System.Data.DataColumn[] {
                        this.tableRoot.RootIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableNameFilter.RootIdColumn}, false);
            this.Relations.Add(this.relationRoot_NameFilter);
            this.relationRoot_AttributeFilter = new global::System.Data.DataRelation("Root_AttributeFilter", new global::System.Data.DataColumn[] {
                        this.tableRoot.RootIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAttributeFilter.RootIdColumn}, false);
            this.Relations.Add(this.relationRoot_AttributeFilter);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRoot() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNameFilter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAttributeFilter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchedule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RootDataSet ds = new RootDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void RootRowChangeEventHandler(object sender, RootRowChangeEvent e);
        
        public delegate void NameFilterRowChangeEventHandler(object sender, NameFilterRowChangeEvent e);
        
        public delegate void AttributeFilterRowChangeEventHandler(object sender, AttributeFilterRowChangeEvent e);
        
        public delegate void ScheduleRowChangeEventHandler(object sender, ScheduleRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RootDataTable : global::System.Data.TypedTableBase<RootRow> {
            
            private global::System.Data.DataColumn columnRootId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnPath;
            
            private global::System.Data.DataColumn columnSub;
            
            private global::System.Data.DataColumn columnNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootDataTable() {
                this.TableName = "Root";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RootDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RootDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RootIdColumn {
                get {
                    return this.columnRootId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PathColumn {
                get {
                    return this.columnPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubColumn {
                get {
                    return this.columnSub;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootRow this[int index] {
                get {
                    return ((RootRow)(this.Rows[index]));
                }
            }
            
            public event RootRowChangeEventHandler RootRowChanging;
            
            public event RootRowChangeEventHandler RootRowChanged;
            
            public event RootRowChangeEventHandler RootRowDeleting;
            
            public event RootRowChangeEventHandler RootRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRootRow(RootRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootRow AddRootRow(string Name, string Path, bool Sub, string Note) {
                RootRow rowRootRow = ((RootRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Path,
                        Sub,
                        Note};
                rowRootRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRootRow);
                return rowRootRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RootDataTable cln = ((RootDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RootDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRootId = base.Columns["RootId"];
                this.columnName = base.Columns["Name"];
                this.columnPath = base.Columns["Path"];
                this.columnSub = base.Columns["Sub"];
                this.columnNote = base.Columns["Note"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRootId = new global::System.Data.DataColumn("RootId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRootId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPath = new global::System.Data.DataColumn("Path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPath);
                this.columnSub = new global::System.Data.DataColumn("Sub", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSub);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRootId}, false));
                this.columnRootId.AutoIncrement = true;
                this.columnRootId.AutoIncrementSeed = 1;
                this.columnRootId.AllowDBNull = false;
                this.columnRootId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootRow NewRootRow() {
                return ((RootRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RootRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RootRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RootRowChanged != null)) {
                    this.RootRowChanged(this, new RootRowChangeEvent(((RootRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RootRowChanging != null)) {
                    this.RootRowChanging(this, new RootRowChangeEvent(((RootRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RootRowDeleted != null)) {
                    this.RootRowDeleted(this, new RootRowChangeEvent(((RootRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RootRowDeleting != null)) {
                    this.RootRowDeleting(this, new RootRowChangeEvent(((RootRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRootRow(RootRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RootDataSet ds = new RootDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RootDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NameFilterDataTable : global::System.Data.TypedTableBase<NameFilterRow> {
            
            private global::System.Data.DataColumn columnNameFilterId;
            
            private global::System.Data.DataColumn columnRootId;
            
            private global::System.Data.DataColumn columnFilter;
            
            private global::System.Data.DataColumn columnFilterType;
            
            private global::System.Data.DataColumn columnNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterDataTable() {
                this.TableName = "NameFilter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NameFilterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NameFilterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameFilterIdColumn {
                get {
                    return this.columnNameFilterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RootIdColumn {
                get {
                    return this.columnRootId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilterColumn {
                get {
                    return this.columnFilter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilterTypeColumn {
                get {
                    return this.columnFilterType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterRow this[int index] {
                get {
                    return ((NameFilterRow)(this.Rows[index]));
                }
            }
            
            public event NameFilterRowChangeEventHandler NameFilterRowChanging;
            
            public event NameFilterRowChangeEventHandler NameFilterRowChanged;
            
            public event NameFilterRowChangeEventHandler NameFilterRowDeleting;
            
            public event NameFilterRowChangeEventHandler NameFilterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNameFilterRow(NameFilterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterRow AddNameFilterRow(RootRow parentRootRowByRoot_NameFilter, string Filter, OnlineBackupUtility.Root.FilterType FilterType, string Note) {
                NameFilterRow rowNameFilterRow = ((NameFilterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Filter,
                        FilterType,
                        Note};
                if ((parentRootRowByRoot_NameFilter != null)) {
                    columnValuesArray[1] = parentRootRowByRoot_NameFilter[0];
                }
                rowNameFilterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNameFilterRow);
                return rowNameFilterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterRow FindByNameFilterId(int NameFilterId) {
                return ((NameFilterRow)(this.Rows.Find(new object[] {
                            NameFilterId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NameFilterDataTable cln = ((NameFilterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NameFilterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNameFilterId = base.Columns["NameFilterId"];
                this.columnRootId = base.Columns["RootId"];
                this.columnFilter = base.Columns["Filter"];
                this.columnFilterType = base.Columns["FilterType"];
                this.columnNote = base.Columns["Note"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNameFilterId = new global::System.Data.DataColumn("NameFilterId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameFilterId);
                this.columnRootId = new global::System.Data.DataColumn("RootId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRootId);
                this.columnFilter = new global::System.Data.DataColumn("Filter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilter);
                this.columnFilterType = new global::System.Data.DataColumn("FilterType", typeof(global::OnlineBackupUtility.Root.FilterType), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilterType);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNameFilterId}, true));
                this.columnNameFilterId.AutoIncrement = true;
                this.columnNameFilterId.AutoIncrementSeed = 1;
                this.columnNameFilterId.AllowDBNull = false;
                this.columnNameFilterId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterRow NewNameFilterRow() {
                return ((NameFilterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NameFilterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NameFilterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NameFilterRowChanged != null)) {
                    this.NameFilterRowChanged(this, new NameFilterRowChangeEvent(((NameFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NameFilterRowChanging != null)) {
                    this.NameFilterRowChanging(this, new NameFilterRowChangeEvent(((NameFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NameFilterRowDeleted != null)) {
                    this.NameFilterRowDeleted(this, new NameFilterRowChangeEvent(((NameFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NameFilterRowDeleting != null)) {
                    this.NameFilterRowDeleting(this, new NameFilterRowChangeEvent(((NameFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNameFilterRow(NameFilterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RootDataSet ds = new RootDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NameFilterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AttributeFilterDataTable : global::System.Data.TypedTableBase<AttributeFilterRow> {
            
            private global::System.Data.DataColumn columnAttributeFilterId;
            
            private global::System.Data.DataColumn columnRootId;
            
            private global::System.Data.DataColumn columnFilter;
            
            private global::System.Data.DataColumn columnFilterType;
            
            private global::System.Data.DataColumn columnNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterDataTable() {
                this.TableName = "AttributeFilter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttributeFilterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AttributeFilterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttributeFilterIdColumn {
                get {
                    return this.columnAttributeFilterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RootIdColumn {
                get {
                    return this.columnRootId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilterColumn {
                get {
                    return this.columnFilter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilterTypeColumn {
                get {
                    return this.columnFilterType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterRow this[int index] {
                get {
                    return ((AttributeFilterRow)(this.Rows[index]));
                }
            }
            
            public event AttributeFilterRowChangeEventHandler AttributeFilterRowChanging;
            
            public event AttributeFilterRowChangeEventHandler AttributeFilterRowChanged;
            
            public event AttributeFilterRowChangeEventHandler AttributeFilterRowDeleting;
            
            public event AttributeFilterRowChangeEventHandler AttributeFilterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAttributeFilterRow(AttributeFilterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterRow AddAttributeFilterRow(RootRow parentRootRowByRoot_AttributeFilter, System.IO.FileAttributes Filter, OnlineBackupUtility.Root.FilterType FilterType, string Note) {
                AttributeFilterRow rowAttributeFilterRow = ((AttributeFilterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Filter,
                        FilterType,
                        Note};
                if ((parentRootRowByRoot_AttributeFilter != null)) {
                    columnValuesArray[1] = parentRootRowByRoot_AttributeFilter[0];
                }
                rowAttributeFilterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAttributeFilterRow);
                return rowAttributeFilterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterRow FindByAttributeFilterId(int AttributeFilterId) {
                return ((AttributeFilterRow)(this.Rows.Find(new object[] {
                            AttributeFilterId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AttributeFilterDataTable cln = ((AttributeFilterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AttributeFilterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAttributeFilterId = base.Columns["AttributeFilterId"];
                this.columnRootId = base.Columns["RootId"];
                this.columnFilter = base.Columns["Filter"];
                this.columnFilterType = base.Columns["FilterType"];
                this.columnNote = base.Columns["Note"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAttributeFilterId = new global::System.Data.DataColumn("AttributeFilterId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttributeFilterId);
                this.columnRootId = new global::System.Data.DataColumn("RootId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRootId);
                this.columnFilter = new global::System.Data.DataColumn("Filter", typeof(global::System.IO.FileAttributes), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilter);
                this.columnFilterType = new global::System.Data.DataColumn("FilterType", typeof(global::OnlineBackupUtility.Root.FilterType), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilterType);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAttributeFilterId}, true));
                this.columnAttributeFilterId.AutoIncrement = true;
                this.columnAttributeFilterId.AutoIncrementSeed = 1;
                this.columnAttributeFilterId.AllowDBNull = false;
                this.columnAttributeFilterId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterRow NewAttributeFilterRow() {
                return ((AttributeFilterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AttributeFilterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AttributeFilterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AttributeFilterRowChanged != null)) {
                    this.AttributeFilterRowChanged(this, new AttributeFilterRowChangeEvent(((AttributeFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AttributeFilterRowChanging != null)) {
                    this.AttributeFilterRowChanging(this, new AttributeFilterRowChangeEvent(((AttributeFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AttributeFilterRowDeleted != null)) {
                    this.AttributeFilterRowDeleted(this, new AttributeFilterRowChangeEvent(((AttributeFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AttributeFilterRowDeleting != null)) {
                    this.AttributeFilterRowDeleting(this, new AttributeFilterRowChangeEvent(((AttributeFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAttributeFilterRow(AttributeFilterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RootDataSet ds = new RootDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AttributeFilterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduleDataTable : global::System.Data.TypedTableBase<ScheduleRow> {
            
            private global::System.Data.DataColumn columnScheduleId;
            
            private global::System.Data.DataColumn columnTime;
            
            private global::System.Data.DataColumn columnScheduleType;
            
            private global::System.Data.DataColumn columnDayOfWeek;
            
            private global::System.Data.DataColumn columnWeekOfMonth;
            
            private global::System.Data.DataColumn columnPromptBeforeBackup;
            
            private global::System.Data.DataColumn columnPeriodToWaitBeforeAlertIfNotCompleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleDataTable() {
                this.TableName = "Schedule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScheduleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleIdColumn {
                get {
                    return this.columnScheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleTypeColumn {
                get {
                    return this.columnScheduleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayOfWeekColumn {
                get {
                    return this.columnDayOfWeek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeekOfMonthColumn {
                get {
                    return this.columnWeekOfMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PromptBeforeBackupColumn {
                get {
                    return this.columnPromptBeforeBackup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToWaitBeforeAlertIfNotCompletedColumn {
                get {
                    return this.columnPeriodToWaitBeforeAlertIfNotCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow this[int index] {
                get {
                    return ((ScheduleRow)(this.Rows[index]));
                }
            }
            
            public event ScheduleRowChangeEventHandler ScheduleRowChanging;
            
            public event ScheduleRowChangeEventHandler ScheduleRowChanged;
            
            public event ScheduleRowChangeEventHandler ScheduleRowDeleting;
            
            public event ScheduleRowChangeEventHandler ScheduleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScheduleRow(ScheduleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow AddScheduleRow(int ScheduleId, System.TimeSpan Time, OnlineBackupUtility.Root.ScheduleType ScheduleType, System.DayOfWeek DayOfWeek, OnlineBackupUtility.Root.WeekOfMonth WeekOfMonth, bool PromptBeforeBackup, System.TimeSpan PeriodToWaitBeforeAlertIfNotCompleted) {
                ScheduleRow rowScheduleRow = ((ScheduleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ScheduleId,
                        Time,
                        ScheduleType,
                        DayOfWeek,
                        WeekOfMonth,
                        PromptBeforeBackup,
                        PeriodToWaitBeforeAlertIfNotCompleted};
                rowScheduleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduleRow);
                return rowScheduleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScheduleDataTable cln = ((ScheduleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScheduleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScheduleId = base.Columns["ScheduleId"];
                this.columnTime = base.Columns["Time"];
                this.columnScheduleType = base.Columns["ScheduleType"];
                this.columnDayOfWeek = base.Columns["DayOfWeek"];
                this.columnWeekOfMonth = base.Columns["WeekOfMonth"];
                this.columnPromptBeforeBackup = base.Columns["PromptBeforeBackup"];
                this.columnPeriodToWaitBeforeAlertIfNotCompleted = base.Columns["PeriodToWaitBeforeAlertIfNotCompleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScheduleId = new global::System.Data.DataColumn("ScheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleId);
                this.columnTime = new global::System.Data.DataColumn("Time", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnScheduleType = new global::System.Data.DataColumn("ScheduleType", typeof(global::OnlineBackupUtility.Root.ScheduleType), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleType);
                this.columnDayOfWeek = new global::System.Data.DataColumn("DayOfWeek", typeof(global::System.DayOfWeek), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayOfWeek);
                this.columnWeekOfMonth = new global::System.Data.DataColumn("WeekOfMonth", typeof(global::OnlineBackupUtility.Root.WeekOfMonth), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeekOfMonth);
                this.columnPromptBeforeBackup = new global::System.Data.DataColumn("PromptBeforeBackup", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPromptBeforeBackup);
                this.columnPeriodToWaitBeforeAlertIfNotCompleted = new global::System.Data.DataColumn("PeriodToWaitBeforeAlertIfNotCompleted", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodToWaitBeforeAlertIfNotCompleted);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow NewScheduleRow() {
                return ((ScheduleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScheduleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScheduleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScheduleRowChanged != null)) {
                    this.ScheduleRowChanged(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScheduleRowChanging != null)) {
                    this.ScheduleRowChanging(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScheduleRowDeleted != null)) {
                    this.ScheduleRowDeleted(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScheduleRowDeleting != null)) {
                    this.ScheduleRowDeleting(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScheduleRow(ScheduleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RootDataSet ds = new RootDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RootRow : global::System.Data.DataRow {
            
            private RootDataTable tableRoot;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RootRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRoot = ((RootDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RootId {
                get {
                    return ((int)(this[this.tableRoot.RootIdColumn]));
                }
                set {
                    this[this.tableRoot.RootIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableRoot.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Root\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoot.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Path {
                get {
                    try {
                        return ((string)(this[this.tableRoot.PathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Path\' in table \'Root\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoot.PathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Sub {
                get {
                    try {
                        return ((bool)(this[this.tableRoot.SubColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sub\' in table \'Root\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoot.SubColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableRoot.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'Root\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoot.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableRoot.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableRoot.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPathNull() {
                return this.IsNull(this.tableRoot.PathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPathNull() {
                this[this.tableRoot.PathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubNull() {
                return this.IsNull(this.tableRoot.SubColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubNull() {
                this[this.tableRoot.SubColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableRoot.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableRoot.NoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterRow[] GetNameFilterRows() {
                if ((this.Table.ChildRelations["Root_NameFilter"] == null)) {
                    return new NameFilterRow[0];
                }
                else {
                    return ((NameFilterRow[])(base.GetChildRows(this.Table.ChildRelations["Root_NameFilter"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterRow[] GetAttributeFilterRows() {
                if ((this.Table.ChildRelations["Root_AttributeFilter"] == null)) {
                    return new AttributeFilterRow[0];
                }
                else {
                    return ((AttributeFilterRow[])(base.GetChildRows(this.Table.ChildRelations["Root_AttributeFilter"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NameFilterRow : global::System.Data.DataRow {
            
            private NameFilterDataTable tableNameFilter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NameFilterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNameFilter = ((NameFilterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NameFilterId {
                get {
                    return ((int)(this[this.tableNameFilter.NameFilterIdColumn]));
                }
                set {
                    this[this.tableNameFilter.NameFilterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RootId {
                get {
                    try {
                        return ((int)(this[this.tableNameFilter.RootIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RootId\' in table \'NameFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameFilter.RootIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filter {
                get {
                    try {
                        return ((string)(this[this.tableNameFilter.FilterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Filter\' in table \'NameFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameFilter.FilterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OnlineBackupUtility.Root.FilterType FilterType {
                get {
                    try {
                        return ((global::OnlineBackupUtility.Root.FilterType)(this[this.tableNameFilter.FilterTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilterType\' in table \'NameFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameFilter.FilterTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableNameFilter.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'NameFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameFilter.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootRow RootRow {
                get {
                    return ((RootRow)(this.GetParentRow(this.Table.ParentRelations["Root_NameFilter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Root_NameFilter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRootIdNull() {
                return this.IsNull(this.tableNameFilter.RootIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRootIdNull() {
                this[this.tableNameFilter.RootIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilterNull() {
                return this.IsNull(this.tableNameFilter.FilterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilterNull() {
                this[this.tableNameFilter.FilterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilterTypeNull() {
                return this.IsNull(this.tableNameFilter.FilterTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilterTypeNull() {
                this[this.tableNameFilter.FilterTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableNameFilter.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableNameFilter.NoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AttributeFilterRow : global::System.Data.DataRow {
            
            private AttributeFilterDataTable tableAttributeFilter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttributeFilterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAttributeFilter = ((AttributeFilterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AttributeFilterId {
                get {
                    return ((int)(this[this.tableAttributeFilter.AttributeFilterIdColumn]));
                }
                set {
                    this[this.tableAttributeFilter.AttributeFilterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RootId {
                get {
                    try {
                        return ((int)(this[this.tableAttributeFilter.RootIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RootId\' in table \'AttributeFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttributeFilter.RootIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.IO.FileAttributes Filter {
                get {
                    try {
                        return ((global::System.IO.FileAttributes)(this[this.tableAttributeFilter.FilterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Filter\' in table \'AttributeFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttributeFilter.FilterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OnlineBackupUtility.Root.FilterType FilterType {
                get {
                    try {
                        return ((global::OnlineBackupUtility.Root.FilterType)(this[this.tableAttributeFilter.FilterTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilterType\' in table \'AttributeFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttributeFilter.FilterTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableAttributeFilter.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'AttributeFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttributeFilter.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootRow RootRow {
                get {
                    return ((RootRow)(this.GetParentRow(this.Table.ParentRelations["Root_AttributeFilter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Root_AttributeFilter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRootIdNull() {
                return this.IsNull(this.tableAttributeFilter.RootIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRootIdNull() {
                this[this.tableAttributeFilter.RootIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilterNull() {
                return this.IsNull(this.tableAttributeFilter.FilterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilterNull() {
                this[this.tableAttributeFilter.FilterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilterTypeNull() {
                return this.IsNull(this.tableAttributeFilter.FilterTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilterTypeNull() {
                this[this.tableAttributeFilter.FilterTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableAttributeFilter.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableAttributeFilter.NoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScheduleRow : global::System.Data.DataRow {
            
            private ScheduleDataTable tableSchedule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchedule = ((ScheduleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleId {
                get {
                    try {
                        return ((int)(this[this.tableSchedule.ScheduleIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleId\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.ScheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan Time {
                get {
                    try {
                        return ((global::System.TimeSpan)(this[this.tableSchedule.TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Time\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OnlineBackupUtility.Root.ScheduleType ScheduleType {
                get {
                    try {
                        return ((global::OnlineBackupUtility.Root.ScheduleType)(this[this.tableSchedule.ScheduleTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleType\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.ScheduleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DayOfWeek DayOfWeek {
                get {
                    try {
                        return ((global::System.DayOfWeek)(this[this.tableSchedule.DayOfWeekColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DayOfWeek\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.DayOfWeekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OnlineBackupUtility.Root.WeekOfMonth WeekOfMonth {
                get {
                    try {
                        return ((global::OnlineBackupUtility.Root.WeekOfMonth)(this[this.tableSchedule.WeekOfMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeekOfMonth\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.WeekOfMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PromptBeforeBackup {
                get {
                    try {
                        return ((bool)(this[this.tableSchedule.PromptBeforeBackupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PromptBeforeBackup\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.PromptBeforeBackupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan PeriodToWaitBeforeAlertIfNotCompleted {
                get {
                    try {
                        return ((global::System.TimeSpan)(this[this.tableSchedule.PeriodToWaitBeforeAlertIfNotCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodToWaitBeforeAlertIfNotCompleted\' in table \'Schedule\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.PeriodToWaitBeforeAlertIfNotCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleIdNull() {
                return this.IsNull(this.tableSchedule.ScheduleIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleIdNull() {
                this[this.tableSchedule.ScheduleIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeNull() {
                return this.IsNull(this.tableSchedule.TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeNull() {
                this[this.tableSchedule.TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleTypeNull() {
                return this.IsNull(this.tableSchedule.ScheduleTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleTypeNull() {
                this[this.tableSchedule.ScheduleTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayOfWeekNull() {
                return this.IsNull(this.tableSchedule.DayOfWeekColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayOfWeekNull() {
                this[this.tableSchedule.DayOfWeekColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeekOfMonthNull() {
                return this.IsNull(this.tableSchedule.WeekOfMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeekOfMonthNull() {
                this[this.tableSchedule.WeekOfMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPromptBeforeBackupNull() {
                return this.IsNull(this.tableSchedule.PromptBeforeBackupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPromptBeforeBackupNull() {
                this[this.tableSchedule.PromptBeforeBackupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToWaitBeforeAlertIfNotCompletedNull() {
                return this.IsNull(this.tableSchedule.PeriodToWaitBeforeAlertIfNotCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToWaitBeforeAlertIfNotCompletedNull() {
                this[this.tableSchedule.PeriodToWaitBeforeAlertIfNotCompletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RootRowChangeEvent : global::System.EventArgs {
            
            private RootRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootRowChangeEvent(RootRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NameFilterRowChangeEvent : global::System.EventArgs {
            
            private NameFilterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterRowChangeEvent(NameFilterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NameFilterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AttributeFilterRowChangeEvent : global::System.EventArgs {
            
            private AttributeFilterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterRowChangeEvent(AttributeFilterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeFilterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScheduleRowChangeEvent : global::System.EventArgs {
            
            private ScheduleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRowChangeEvent(ScheduleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591